Managing Tables & Understanding Constraints

--------- Create Table ---------------

a.) Syntax:

create table table_name (
   column1 datatype(length) column_constraint,
   column2 datatype(length) column_constraint,
   column3 datatype(length) column_constraint,
   table_constraints
);

b.) \dt+; - To view the tables under database.

    # Alter Table Name
    alter table 'table_name' rename to 'new_table_name'

-------- Postgresql Constraints -----------

  a.) NOT NULL – ensures that values in a column cannot be NULL.

  b.) UNIQUE – ensures the values in a column unique across the rows within the same table.

  c.) CHECK – a CHECK constraint ensures the data must satisfy a boolean expression.

  c.) PRIMARY KEY – a primary key column uniquely identify rows in a table. A table can have one and only one primary key. The primary key constraint allows you to define the primary key of a table.


  A primary key is a column or a group of columns used to identify a row uniquely in a table.Technically, a primary key constraint is the combination of a not-null constraint and a UNIQUE constraint.
  
  Syntax:

    create table table_name (
	  column_1 data_type PRIMARY KEY,
	  column_2 data_type
    );

   In case the primary key consists of two or more columns, you define the primary key constraint as follows:

  Syntax:

    create table table_name (
	  column_1 data_type,
	  column_2 data_type
	  primary Key (column1, column2)
    );

  e.)FOREIGN KEY - A foreign key is a column or a group of columns in a table that reference the primary key of another table.

  The table that contains the foreign key is called the referencing table or child table. 

  And the table referenced by the foreign key is called the referenced table or parent table.

  A table can have multiple foreign keys depending on its relationships with other tables.

  Syntax:

    foreign key (foreign_key column)
      refrences parent_table (parent_key column),


------------Sequence-------------

A sequence is a special kind of database object that generates a sequence of integers. A sequence is often used as the primary key column in a table.

The sequence can be created through the SERIAL pseudo-type as follows:

* SERIAL

  Syntax: 
    Create table table_name(
      id serial
    );

a.) It creates a sequence object and set the next value generated by the sequence as the default value for the column.

b.) It adds a NOT NULL constraint to the id column because a sequence always generates an integer, which is a non-null value.

* GENERATED AS IDENTITY

  # The GENERATED ALWAYS instructs PostgreSQL to always generate a value for the identity column. If you attempt to insert (or update) values into the GENERATED ALWAYS AS IDENTITY column, PostgreSQL will issue an error.

 Syntax: 
    Create table table_name(
      id int generated always as identity
    );

* GENERATED BY DEFAULT

  # The GENERATED BY DEFAULT also instructs PostgreSQL to generate a value for the identity column. However, if you supply a value for insert or update, PostgreSQL will use that value to insert into the identity column instead of using the system-generated value.

  Syntax: 
    Create table table_name(
      id int generated by default as identity
    );

--------------- Modifications in Table ----------------------

a.) Copy a Table

    Syntax - With Data

      create table 'table_name' as table 'existing table_name';

    Syntax - Without Data
      create table 'table_name' as table 'existing table_name' with no data;

b.) Create a Temporary Table

    It is a short-lived table that exists for the duration of a database session. PostgreSQL automatically drops the temporary tables at the end of a session or a transaction.

    create temp table 'table_name'(
      column1 datatype(length) column_constraint,
      column2 datatype(length) column_constraint
    );

c.) Drop Table / Delete Table / Trucate Table
  
    Syntax: Drop Table
      drop table table_name [CASCADE];

    The CASCADE option allows you to remove the table and its dependent objects.

    Syntax: Trunacte Table
      trucate table table_name;

    The  TRUNCATE TABLE statement deletes all data from a table without scanning it. This is the reason why it is faster than the DELETE statement.

d.) Add the Column

    Syntax:
      alter table table_name add column col_name datatype column_constraint;

e.) Drop the Column
    
    Syntax:
      alter table table_name drop column col_name;

f.) Rename the Column 
    
    Syntax:
      alter table table_name rename column 'old_col_name' to 'new_col_name';

g.) Change the Column datatype
   
    Syntax:
      alter table table_name alter column 'col_name' TYPE 'new_data_type';

h.) Rename the table
    
    Syntax:
      alter table table_name rename to 'new_table_name';

i.) Set / Drop Not Null Constraint
    
    Syntax:
      alter table 'table_name' alter column 'column_name' set/drop not null;

j.) Set _blank as the default value
    
      Syntax:
        alter table table_name alter column 'col-name' set default '_blank';

j.) Add CHECK constraint
    
    Syntax:
       alter table table_name add check expression;

    Example:
       alter table table_name add check (col_name IN('val', 'val2', 'val3'));        

k.) Update Data/Values in column
    
    Syntex: 
      update table_name set column_name = 'value/data';        

