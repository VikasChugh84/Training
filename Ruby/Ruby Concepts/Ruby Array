* Array - An collection of integer indexed objects called elements, series of such elements refer as 'Array'.Any object may be array element.Array Indexing in offset may be positive, negative, non-negative.

x = [2, "ts", 2.0, 5..4] - Array contains an Integer, String, Float, Range etc.

------------------------- Create Arrays -----------------------

* Create Array of hashes.
  
  x = Array.new(4) {Hash.new} =>  [{}, {}, {}, {}]

  push values into array of hashes
  x.each {|a| a[:a]=1} => [{:a=>1}, {:a=>1}, {:a=>1}, {:a=>1}] 


* Create Array of strings.

  x = Array.new(4) {|i| i.to_s} = ["0", "1", "2", "3"] 


* Create multidimensional/nested array.

  x = Array.new(1) {Array.new(1)} => [[nil], [nil]]

  x = Array.new(2) {Array.new(1){Array.new(1)}} => [[[nil]], [[nil]]]


* Create array using the Array() method

  Array({:a => "a", :b => "b"}) => [[:a, "a"], [:b, "b"]]



-------------------------- Accessing Elements -----------------

arr = [45, 22, 'st', 32, 67, 83]

* arr[0] => 45
 
* arr[1,2] => [22, 'st']
 
* arr[-1] => 83
 
* arr[-2,-1] => nil
 
* arr[1..-2] => [22, "st", 32, 67]
 

-------------------------- Obtaining Info (length), (count), (empty), (include?) -----------------

arr = [45, 22, 'st', 32, 67, 83, 'tl']

* length - arr.length => 7
  # count the number of elements in array

* count - arr.count => 7
  # count the number of elements in array
  arr.count{|c| c.is_a? Integer} => 5

* empty - arr.empty? => 'false'

* include? - arr.include? (22) => true, arr.include? (st) => false, arr.include? ('st') => true


-------------------------- Remove elements (pop),(shift),(delete_at),(delete),(compact),(uniq)-----------------

arr = [45, 22, 'st', 32, 67, 83, 'tl']

* pop - To retrieve last element and at the same time remove it.  
  arr.pop => 'tl'
  arr = [45, 22, 'st', 32, 67, 83]

* shift - To retrieve first element and at the same time remove it.
  arr.pop => 45
  arr = [22, 'st', 32, 67, 83, 'tl']

* delete_at() - To retrieve and delete the element of particular index.
  arr.delete_at(2) => 'st'
  arr = [45, 22, 32, 67, 83, 'tl']

* delete() - To retrieve and delete the any element in the array.
  arr.delete('tl') => 'tl'
  arr = [45, 22, 'st', 32, 67, 83]

* compact - To delete the nil value in the array.
  arr = [45, 'st, nil, 34, 7, 0, nil]
  arr.compact => arr = [45, 'st, 34, 7, 0]

* uniq / uniq! - To retrieve the elements with non-duplicacy 
  arr = [45, 22, 'st', 32, 67, 83, 'tl', 22, 'st', 83]
  arr.uniq => [45, 22, "st", 32, 67, 83, "tl"]

  
-------------------------- Iteration/finding (reverse_each),(map),(select),(reject),(drop_while),(delete_if),(keep_if)-----------------

* reverse_each - To reverse the elements of array.

  words = %w[one 2 three] or ["one", "2", "three"]
  str = []
  words.reverse_each{|c| str += "#{c}"}
  srt = "three2one"

* reject - Elements can be rejected from an array according to criteria defined in a block

  arr = [34,56,'tg',54,45.5]
  arr.reject{|c| c.is_a? Float} [34, 56, "tg", 54]

* delete_if - It can delete the element based on condition
  arr = [56,45,234,56,21]
  arr.delete_if{|c| c <= 25} => [56, 45, 234, 56]

* cycle - Calls a given block with each element, then does so again, for a specified number of time.
  
  # Calls a block for each element for number of times defined and if the specified number is 0 or negative (-1), didn't call the block.
   
  x = Array.new => []

  [2, 4].cycle(2) {|c| x.push(c)} => [2,4,2,4]

  [2, 4].cycle(3) {|c| x.push(c)} => [2,4,2,4,2,4]

* combination - Calls the block if provided with combinations of elements of self. The order of combinations is indeterminate.
  a = [2,4,6,8].combination(2) {|c| p c} => [2, 4] [2, 6] [2, 8] [4, 6] [4, 8] [6, 8]

* permutation - Calls a block with permutations of elements a permutation does not use the same element more than once.
  a = [2,4,6,8].permutation(2) {|c| p c} => [2, 4] [2, 6] [2, 8] [4, 2] [4, 6] [4, 8] [6, 2] [6, 4] [6, 8] [8, 2] [8, 4] [8, 6]


--------------------------Quering (&),include?,empty?,all?----------------------

* & - Combining the two arrays and gives the common element as result
  [2,4,6] & [5,8,2,6] => [2,6]


* include? - [2,5,3,6,'rt',(3..5)].include? (3..5) => true


* empty? - [2,5,3,6,'rt',(3..5)].empty?


* all? - [2,5,3,6].all? {|c| c.is_a? Integer} => true


* any? - [2,5,3,6,'rt',(3..5)].any? {|c| c.is_a? Range} => true
         [2,5,3,6,'rt',(3..5)].any? {|c| c.is_a? Hash} => false


* none? - [2,5,3,6,'rt',(3..5)].none? {|c| c.is_a? Hash} => true
          [2,5,3,6,'rt',(3..5)].none? {|c| c.is_a? Range} => false


* one? - [2,5,3,6,'rt',(3..5)].one? {|c| c.is_a? String} => true


* count - [2,5,3,6,'rt',(3..5)].count {|c| c != (3..5)} => 5
          [2,5,3,6,'rt',(3..5)].count {|c| c.is_a? Integer} => 4

* find_index - [2,5,3,6,'rt',(3..5)].find_index(6) => 3
               [2,5,3,6,'rt',(3..5)].find_index('rt') => 4

* rindex - [2,5,3,6,'rt',(3..5)].rindex('rt') => 4


--------------------------Comparing (<=>),(==), eql?-----------------------

* (<=>) - Returns -1, 0, or 1 as self is less than, equal to, or greater than a given object.
         x = [2,4,6,3,2] 
         x[0] <=> x[4] => 0
         x[1] <=> x[4] => 1
         x[3] <=> x[2] => -1

* (==) - x[0] == x[4] => true
         x[2] == x[4] => false
 
* eql? - x[0].eql? x[4] => true
         x[0].eql? x[2] => false

--------------------------Fetching / Retreiving -----------------------

* fetch() - Fetch the specific element of array based on its index.
  [2,4,5].fetch(1) => 4 
 
* first - [2,4,5].first => 2

* last - [2,4,5].last => 5

* min() - comparing elements, retrieve the element with the minimum 
        [2,4,5].min => 2
        [4,6,2,5,6,3].min(2) => [2,3]

* max() - comparing elements, retrieve the element with the minimum 
        [2,4,5].max => 5
        [4,6,2,5,6,3].min(2) => [5,6]

 
* minmax - comparing elements and return the minimum and maximum element of array.
        [4,6,2,5,6,3].minmax => [2,6]
        [4,6,2,5,6,3].minmax{|a,c| a.size <=> c.size} => [4,4]

* assoc() - It returns the first element in array based on the object passed else pass nil
        [[3,4], {t:75}, [3,4,8], ["st"], [4,2],[4,5,6]].assoc(3) => [3,4]
        [[3,4], {t:75}, [3,4,8], ["st"], [4,2],[4,5,6]].assoc(4) => [4,2]
        [[3,4], {t:75}, [3,4,8], ["st"], [4,2],[4,5,6]].assoc(6) => nil

* rassoc() - It returns the second element in array based on the object passed else pass nil
        [[3,4], {t:75}, [3,4,8], ["st"], [4,2],[4,5,6]].rassoc(2) => [4,2]
        [[3,4], {t:75}, [3,4,8], ["st"], [4,2],[4,5,6]].rassoc(4) => [3,4]
        [[3,4], {t:75}, [3,4,8], ["st"], [4,2],[4,5,6]].rassoc(5) => [4,5,6]

* at - Returns the element at a given offset - [4,6,2,5,6,3].at(3) => 5

* values_at - Returns the element at a given offsets. [4,6,2,5,6,3].values_at(3,5) = [5,3]

* dig() - Returns the object in nested objects that is specified by a given index and additional arguments.
        x = [[3,4], {t:75}, [3,4,[8,5]]]
        x.dig(1) => {t:75} 
        x.dig(2,1) => 4
        x.dig(2,2) => [8,5]
        x.dig(2,2,1) => 5
        x.dig(2,2,3) => nil

* drop() - Returns trailing elements as determined by a given index.
       ['st',2,3,4].drop(0) => ['st',2,3,4]
       ['st',2,3,4].drop(1) => [2,3,4]
       ['st',2,3,4].drop(2) => [3,4]
       ['st',2,3,4].drop(3) => [4]

* take() - Returns leading elements as determined by a given index.
       ['st',2,3,4].take(0) => []
       ['st',2,3,4].take(1) => ['st']
       ['st',2,3,4].take(2) => ['st',2]
       ['st',2,3,4].take(3) => ['st',2,3]

* drop_while() - It checks the value and compare it with condition and drop the elements based on condition.
       [2,3,4,5,3,24].drop_while{|c| c < 5} => [5,3,24]
       [2,3,4,5,3,24].drop_while{|c| c < 20} => [24]

* take_while() - It checks the value and compare it with condition and take the elements based on condition.
       [2,3,4,5,3,24].take_while{|c| c < 5} => [2,3,4]
       [2,3,4,5,3,24].take_while{|c| c < 20} => [2,3,4,5,3]

* slice - Return the consecutive elements based on arguments
       [2,3,4,5,3,24].slice(2..5) => [4,5,3,24]
       # It searches for offsets 2..5 and return elements accordingly.

* sort - Return all elements in order based on condition specified.
       [2,45,4,24,3,56].sort = > [2, 3, 4, 24, 45, 56] 


* reverse - Return all elements in reverse order based on condition specified
       [2,45,4,24,3,56].sort.reverse => [56, 45, 24, 4, 3, 2] 

* compact - To delete the nil value in the array.
       arr = [45, 'st, nil, 34, 7, 0, nil]
       arr.compact => arr = [45, 'st, 34, 7, 0]

* select/filter - Elements can be selected from an array according to criteria defined in a block

       arr = [23,44,'st', 45]
       arr.select{|c| c.is_a? Integer} => [23,44,45]

       arr = [3,6,3]
       arr.select {|a| a > 3} => [6] 

* uniq / uniq! - To retrieve the elements with non-duplicacy 
       arr = [45, 22, 'st', 32, 67, 83, 'tl', 22, 'st', 83]
       arr.uniq => [45, 22, "st", 32, 67, 83, "tl"]

* rotate - Returns all elements with some rotation from one end to the other.
       [2,45,4,24,3,56].rotate => [45, 4, 24, 3, 56, 2]
       [2,45,4,24,3,56].rotate(3) => [24, 3, 56, 2, 45, 4] 
       # Shift the element of offset on [0] offset.

* shuffle - Returns all elements in random order
       [2,45,4,24,3,56].shuffle => [45,4,3,24,56,2]
  
* sample - Return the random element / elements as sample
       [2,45,4,24,3,56].sample => 56
       [2,45,4,24,3,56].sample(3) => [24,2,45]

-------------------------- Assigning / Inserting element into array -----------------------

* ([]=) - Assigning the elements for an object.
       a = Array.new => []
       a[0],a[1],a[2] = [2,'st',32]
       a = [2,'st',32]

* (push(),append, <<) - push the element in last position and we can push the n number of elements
     arr = [45, 22, 'st', 32, 67, 83, 'tl']

     arr.push(23) => [45, 22, 'st', 32, 67, 83, 'tl', 23]
     arr.push(23,45,65) => [45, 22, 'st', 32, 67, 83, 'tl', 23, 45, 65]
     arr.append(23,45,65,67) => [45, 22, 'st', 32, 67, 83, 'tl', 23, 45, 65,67]
     arr << 22 => [45, 22, 'st', 32, 67, 83, 'tl', 23, 22]

* (unshift(), prepend) - Insert the value into beginning of array
  arr.unshift(64) => [64, 45, 22, 'st', 32, 67, 83, 'tl']

* insert() - Insert the element at any position and n number of elements
  arr.insert(4, "td", 45) => [45, 22, 'st', 32, 'td', 45, 67, 83, 'tl']

* concat() - Append or push all arrays into given array.
  x = [2,5]  -  y = [56,32]  -  z = [21,3]
  x.concat(y,z) => [2,5,56,32,21,3]

* fill(1..3 arguments) - Replaces specified elements with specified objects.
  arr = [2,5,6,2,67,54]
  arr.fill(3) => [3,3,3,3,3,3] #Replace all the elements with 3
  arr.fill(2,2) => [2,5,2,2,2,2] #Replace all the elements from the specified offset
  arr.fill('x', 4, 1) => [2, 5, 6, 2, "x", 54]  #Replace the specific element on specified offset
  arr.fill('x', 4, 2) => [2, 5, 6, 2, "x", "x"] #Replace the specific element on specified offset and after wards.

* rotate - Returns all elements with some rotation from one end to the other.
       [2,45,4,24,3,56].rotate => [45, 4, 24, 3, 56, 2]
       [2,45,4,24,3,56].rotate(3) => [24, 3, 56, 2, 45, 4] 
       # Shift the element of offset on [0] offset.

* shuffle - Returns all elements in random order
       [2,45,4,24,3,56].shuffle => [45,4,3,24,56,2]

* sort - Return all elements in order based on condition specified.
       [2,45,4,24,3,56].sort = > [2, 3, 4, 24, 45, 56] 

* sort_by- Replaces self with its elements sorted, as determined by a given block.
       ["vierrk", "tses", "ssyou"].sort_by{|c| c.size} => ["tses", "ssyou", "vierrk"] 

* replace() - Replaces the content of self with the content of a given array.
       a = [45,32,6,4]
       a.replace(['a',7,6,'tt']) => ["a", 7, 6, "tt"]

* reverse - Return all elements in reverse order based on condition specified
       [2,45,4,24,3,56].sort.reverse => [56, 45, 24, 4, 3, 2] 

-------------------------- Combining into array -----------------------

* & - Combining the two arrays and gives the common element as result in array
  [2,4,6] & [5,8,2,6] => [2,6]

* intersection - Return an array with common elements in each array. 
  [2,4,6,8,10].intersection([5,8,2,6,4], [5,10,4,8]) => [4,6]

* (+) - Returns an array containing elements found both in self and in each given array.
  [2,4,6] + [5,8,2,6] + ['st'] => [2, 4, 6, 5, 8, 2, 6, "st"] 

* (-) - Returns an array containiing all elements of self that are not found in a given array.
  [2,4,4,6,8] - [5,8,2,6] => [4,4]

* (|) - Returns an array containing all elements of self and all elements of a given array, duplicates removed.
  [2,4,4,5,3] | [4,5,6,2,7] => [2, 4, 5, 3, 6, 7]

* union - Returns an array containing all elements of self and all elements of given arrays, duplicates removed.
  [2,4,4,5,3].union([4,5,6,2,7],[4,5]) => [2, 4, 5, 3, 6, 7]

* difference - Returns a new Array containing only those elements from self that are not found in any of the Arrays or other_arrays; items are compared using eql?
  [2,4,6,8,10,12].difference([5,8,2,6,4], [5,10,4,8]) => [12]

* product() - yields all combinations of elements from self and given arrays.
  [2,3].product([4,5]) => [[2, 4], [2, 5], [3, 4], [3, 5]]

-------------------------- (select/filter) , (map/collect) ----------------------------

* map/collect - Returns an array containing the block return-value for each element.
  
  arr = [2,4,'d',10]
  arr.map{|c| c.class} => [Integer, Integer, String, Integer] 
  Recheck the arr => [2,4,'d',10]

  arr.map{|c| c.is_a? Integer} =>  [true, true, false , true]
 
* map!/collect! - Replaces each element with a block return-value.
  arr = [2,4,'d',10]
  arr.map{|c| c.class} => [Integer, Integer, String, Integer] 
  Recheck the arr => [Integer,Integer,String,Integer]
  # Here it replaces the element value with defined output

* select/filter - Returns an array containing elements selected by a given block.

  arr = [2,4,'d',10]
  arr.select{|c| print c} => [2,4,'d',10]
  arr.select{|c| c.is_a? Integer} => [2,4,10]


-------------------------- Coverting from array ----------------------------


* flatten - Return an array with recursive flattening of self i.e nested /multidimensional

  arr = [2, ['d', 5], 6, 7, [(3..4), 5, [5, 5]]]
  arr.flatten => [2, 4, 5, 6, 7, 8, 5, 5, 5]

* to_s, inspect - convert array into string
  
  [2,4,'d',10].to_s => "[2, 4, \"d\", 10]"

* join - Returns a newsString containing the elements joined by the field separator.
  [2,4,4,5,3].join => "24453"
  [2,4,4,5,3].join("\n") => "2\n4\n4\n5\n3" 

* to_a - Returns self or a new array containing all elements.
  [2,4,4,5,3].to_a => [2, 4, 4, 5, 3]

* to_ary - Returns self.
  [2,4,4,5,3].to_ary => [2, 4, 4, 5, 3]

* to_h - Returns a new hash formed from the elements.
  
  When a block is given, calls the block with each array element; the block must return a 2-element Array whose two elements form a key-value pair in the returned Hash:

  [2,4,4,5,3].to_h {|c| [c,c]} => {2=>2, 4=>4, 5=>5, 3=>3}

  Without block, self must be an Array of 2-element sub-arrays, each sub-array is formed into a key-value pair in the new Hash.

  x = [['1', 'one'], ['2', 'two'], ['3', 'three']]
  x.to_h => {"1"=>"one", "2"=>"two", "3"=>"three"}

* transpose - Transposes self, which must be an array of arrays.
  x = [['1', 'one'], ['2', 'two'], ['3', 'three']]
  x.transpose => [["1", "2", "3"], ["one", "two", "three"]]

* zip - Returns a new array of arrays containing self and given array.
  [3,4,5].zip => [[3], [4], [5]]
  [['1', 'one'], ['2', 'two'], ['3', 'three']].zip => [[["1", "one"]], [["2", "two"]], [["3", "three"]]]

  
* sum - Returns a sum of elements according to either + or a given block.

  x = ['ab', 'cd', 'ef']
  x.sum('ef') => "efabcdef"

  x = [10,20,30]
  x.sum => 60
  x.sum(15) => 75













