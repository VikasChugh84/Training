-------------- Instance Variables ----------------

* Instance variable has @ symbol in thier front. It exists as long as the object instance exists and it is one of the ways we tie data to objects.It does not "die" after the initialize method is run. It "lives on", to be referenced, until the object instance is destroyed.

Ruby Program:

Class Employee (name)
  def initialize
    @name = name
  end
end

Ranjit = Employee.new ("Ranjit")

# It results in assigning the string "Ranjit" to the @name instance variable for the object Ranjit.

Vikram = Employee.new ("Vikram")



-------------- Class and Global Variables ----------------

* Class variables begin with @@ and must be initialized before they can be used in method definitions.It can be referred as variables for an entire class.We can access class variables from within an instance method

* Global variables - class variables are not available across all classes. If we need single variable that available across all classes we can define it as global variable.It is begin with ($) sign.

class Employee
  # Class variables begin with @@
  @@number_of_employees = 1

  def initialize(name)
    @name = name
    @@number_of_employees += 1
    # It shows here we can access class variables within an instance method initialize
    puts "* New employee joined the organisation"
  end

  # Defining a class method name with the reserved word 'self.
  def self.employee_count
    puts "* Number of employees currently working is #{@@number_of_employees}"
  end
end

# Call the employee_count i.e class Method
Employee.employee_count

# Initialized new instance/object of class 
Ajay = Employee.new("Ajay")
