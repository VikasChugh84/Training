** Ruby Operators

Ruby includes a various set of operators and operators are actually method calls.

Lets understand with example:

* x=5 & y=10
  # We assign the values under x and y. 

Here a is object in which we assign the integer value. We can notice here x is object of class integer (a.class)

x.+(y) - Here we '+' is the method call called by object x and is called with y as its argument.

we can alos specify it as x + y, Output will be sum => 15



---------------- Arithmetic Operators --------------------------

Lets assume values x=10 and y=5

* Addition (+) - Adds values on either side of the operator.

* Subtraction (-) - Subtracts right hand operand from left hand operand.
  
  operands?
 
  # consider x - y - right hand operand is y, deducts y from x and display the output.

* Multiplication (*) âˆ’ Multiplies values on either side of the operator.

* Division (/) - Divides left hand operand by right hand operand.

* Modulus (%) - Divides left hand operand by right hand operand and returns remainder.
  
  # x%y - Remainder here will be '0'

* Exponent (**) - Performs exponential (power) calculation on operators.
  
  # x**y will give 10 to the power 5 i.e 10 * 10 * 10 * 10 * 10 - 100000




---------------- Comparison Operators --------------------------

* (==)  - Checks if the value of two operands are equal.

* (!=)  - Checks if the value of two operands are not equal.

* (>)   -  Checks if the value of left operand is greater than the value of right operand.
  
* (<)   -  Checks if the value of left operand is less than the value of right operand.

* (>=)  - Checks if the value of left operand is greater than or equal to the value of right operand.

* (<=)  - Checks if the value of left operand is less than or equal to the value of right operand.

* (<=>) - Combined comparison operator. Returns 0 if first operand equals second, 1 if first operand is greater than the second and -1 if first operand is less than the second.

* .eql? - This method returns true if obj and other refer to the same hash key.

  Let's understand with example:

  -- 1.eql? 1.0 - Return false because 1 is having the integer class and 1.0 is having float class.

  -- 1.eql? 1 - Return true because object and refer object is having the integer class.

  -- 1 == 1.0 - Retun true because despite of different classes their numeric value is same.

* .equal? - Unlike the (==) operator. This method checks if both operators refer to same object.

  Let's understand with example:

  Say a = "xyz" and b = "xyz"

  -- a == b - Return true both have identical value

  -- a.equal? b - Return false because despite of having same numeric values their object_id are different.

  Note: When we create a object of integer class say a = 50 and b = 50 then both objects has identical object_id in case of string or array class it's different.

* (===) - Case equality used to test equality within a when clause of a case statement.

  Let's understand with example:

  minutes = 15
  case minutes
    when 10..20
      puts "match"
    else
      puts "no match"
    end 
  # Output: match

  minutes = 15
    if (16..20) === minutes
      puts "match"
    else
      puts "no match"
    end
  # Output: no match

  => Here 10..20 is object of class "Range"


---------------- Assignment Operators --------------------------

* (=)   - Assigns values from right side operands to left side operand.

* (+=)  - It adds right operand to the left operand and assign the result to left operand.

* (-=)  - subtracts right operand from the left operand and assign the result to left operand.

* (*=)  - It multiplies right operand with the left operand and assign the result to left operand.

* (/=)  - It divides left operand with the right operand and assign the result to left operand.

* (%=)  - It takes modulus using two operands and assign the result to left operand.

* (**=) - It performs exponential (power) calculation on operators and assign value to the left operand.



---------------- Parallel Assignment --------------------------

Ruby supports parallel assignment to assign values to the objects simultaneously.

say a,b,c = 10,20,30

It assigns 10 in a, 20 in b, 30 in c.

Parallel assignment is also useful for swapping the values held in two variables.

a,b = c,a

This inserts the value of c under a and value of a under b.


---------------- Bitwise Operators --------------------------

They are working on bits and perform bits by bits operation.

Prior to this we should understand how to calculate binary format for any integer.

* (&) AND operator  - It copies a bit to the result if it exists in both operands.

Lets understand with example consider a two arrays
[1,2,4,8] & [1,2,3,6]

Output - [1,2]

* (|) OR operator - It copies a bit if it exists in either operand.

* (~) Ones Complement Operator - It is unary and has the effect of 'flipping' bits.

* (<<) Left Shift Operator - The left operands value is moved left by the number of bits specified by the right operand.

* (>>) Right Shift Operator - The left operands value is moved right by the number of bits specified by the right operand.
