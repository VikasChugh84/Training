** Ruby Operators

Ruby includes a various set of operators and operators are actually method calls.

Lets understand with example:

* x=5 & y=10
  # We assign the values under x and y. 

Here a is object in which we assign the integer value. We can notice here x is object of class integer (a.class)

x.+(y) - Here we '+' is the method call called by object x and is called with y as its argument.

we can alos specify it as x + y, Output will be sum => 15



---------------- Arithmetic Operators --------------------------

Lets assume values x=10 and y=5

* Addition (+) - Adds values on either side of the operator.

* Subtraction (-) - Subtracts right hand operand from left hand operand.
  
  operands?
 
  # consider x - y - right hand operand is y, deducts y from x and display the output.

* Multiplication (*) − Multiplies values on either side of the operator.

* Division (/) - Divides left hand operand by right hand operand.

* Modulus (%) - Divides left hand operand by right hand operand and returns remainder.
  
  # x%y - Remainder here will be '0'

* Exponent (**) - Performs exponential (power) calculation on operators.
  
  # x**y will give 10 to the power 5 i.e 10 * 10 * 10 * 10 * 10 - 100000




---------------- Comparison Operators --------------------------

* (==)  - Checks if the value of two operands are equal.

* (!=)  - Checks if the value of two operands are not equal.

* (>)   -  Checks if the value of left operand is greater than the value of right operand.
  
* (<)   -  Checks if the value of left operand is less than the value of right operand.

* (>=)  - Checks if the value of left operand is greater than or equal to the value of right operand.

* (<=)  - Checks if the value of left operand is less than or equal to the value of right operand.

* (<=>) - Combined comparison operator. Returns 0 if first operand equals second, 1 if first operand is greater than the second and -1 if first operand is less than the second.

* .eql? - This method returns true if obj and other refer to the same hash key.

  Let's understand with example:

  -- 1.eql? 1.0 - Return false because 1 is having the integer class and 1.0 is having float class.

  -- 1.eql? 1 - Return true because object and refer object is having the integer class.

  -- 1 == 1.0 - Retun true because despite of different classes their numeric value is same.

* .equal? - Unlike the (==) operator. This method checks if both operators refer to same object.

  Let's understand with example:

  Say a = "xyz" and b = "xyz"

  -- a == b - Return true both have identical value

  -- a.equal? b - Return false because despite of having same numeric values their object_id are different.

  Note: When we create a object of integer class say a = 50 and b = 50 then both objects has identical object_id in case of string or array class it's different.

* (===) - Case equality used to test equality within a when clause of a case statement.

  Let's understand with example:

  minutes = 15
  case minutes
    when 10..20
      puts "match"
    else
      puts "no match"
    end 
  # Output: match

  minutes = 15
    if (16..20) === minutes
      puts "match"
    else
      puts "no match"
    end
  # Output: no match

  => Here 10..20 is object of class "Range"


---------------- Assignment Operators --------------------------

* (=)   - Assigns values from right side operands to left side operand.

* (+=)  - It adds right operand to the left operand and assign the result to left operand.

* (-=)  - subtracts right operand from the left operand and assign the result to left operand.

* (*=)  - It multiplies right operand with the left operand and assign the result to left operand.

* (/=)  - It divides left operand with the right operand and assign the result to left operand.

* (%=)  - It takes modulus using two operands and assign the result to left operand.

* (**=) - It performs exponential (power) calculation on operators and assign value to the left operand.



---------------- Parallel Assignment --------------------------

Ruby supports parallel assignment to assign values to the objects simultaneously.

say a,b,c = 10,20,30

It assigns 10 in a, 20 in b, 30 in c.

Parallel assignment is also useful for swapping the values held in two variables.

a,b = c,a

This inserts the value of c under a and value of a under b.



---------------- Bitwise Operators --------------------------

They are working on bits and perform bits by bits operation.

Prior to this we should understand how to calculate binary format for any integer.

lets assume the number x = 25 and y = 40

=> irb : 25.to_s(2) - "11001"

=> irb : 40.to_s(2) - "101000"


Binary for x is - 0001 1001

Binary for y is - 0010 1000

* (&) AND operator  - Takes two numbers as operands and does AND on every bit of two numbers. 
  The result of AND is 1 only if both bits are 1.
  
  x & y - It technically multiplies the digits of both operands and result of AND is 1 only if both bits are 1.
  
  Output - 0000 1000 - 8

* (|) OR operator - Takes two numbers as operands and does OR on every bit of two numbers. 
  The result of OR is 1 any of the two bits is 1.

  x | y - It technically add the digits of both operands and result of OR is 1 only if any of the two bits is 1.

  Output - 0   0    1     1        1       0       0        1  - 57 
                   25     24      23      22       21      20
                   32  +  16   +   8  +   NR   +   NR   +   1


* (^) - Takes two numbers as operands and does XOR on every bit of two numbers. 
  The result of XOR is 1 if the two bits are different.

  Output - 0011 0001 - 49

* (~) Ones Complement Operator - This operator takes a single number and used to perform complement operation of 8-bit.

* (<<) Left Shift Operator - The LEFT SHIFT operator << shifts each bit of a number to the left by n positions.

  Example : 

  a = 15 , a << 2 , 15 << 2

  15.to_s(2) - Binary for 15 is -    0      0      0      0     1       1       1       1 

                                     0      0      1      1     1       1       0       0  - Each bit shifts left by 2 positions

  output is - 60


* (>>) Right Shift Operator - Takes two numbers, right shifts the bits of the first operand, the second operand decides 
  the number of places to shift.

  Example : 

  a = 15 , a >> 2 , 15 >> 2

  15.to_s(2) - Binary for 15 is -             1       1       1       1         
                                     
  Each bit shifts right by 2 positions  -     0       0       1       1     



---------------- Logical Operators --------------------------

Lets consider x=15, y=20

* (&&) - It is an alternate for (and) Operator.If both the operands are non zero, then the condition becomes true.
   
  Example :

  if x == 15 && y == 20
    puts result = x + y
  else 
    puts false
  end

  => output is 35

* (||) - It is an alternate for (or) operator.If any of the two operands are non zero, then the condition becomes true.

  Example :

  if x == 10 || y == 20
    puts result = x + y
  else 
    puts false
  end

  => output is 35

* (!) - It is an alternate for (not) operator.If a condition is true, then Logical NOT operator will make false.

  Example :

  if x != 15 && y == 20
    puts result = x + y
  else 
    puts false
  end

  => output is false

---------------- Ternary Operators --------------------------

  (?:) - It is a conditional operator which is a shorthand version of the if-else statement.

  Syntax : 

  condition ? first_expression : second_expression;

  Example :

  Lets say name = 'Vikram', age = 30, role = 'employee'

  Assign Values to name, age, role = 'Vikram', 30, 'employee' [Creates an array of attributes values and each attribute belongs to specific class ["Vikram", 30, "employee"] ]

  Ternary Operator - name == "Vikram" && age != 32 ? 'Role = Employee' : 'Role = Non-Employee'

  It will be written as

    if name == "Vikram" && age != 32
      puts 'Role = Employee'
    else
      puts 'Role = Non-Employee'
    end


---------------- Range Operators --------------------------

Range operators are used for creating the specified sequence range of specified elements.

* Double Dot (..) operator is used to create a specified sequence range in which both the starting and ending element will be inclusive.

  Example : (2..8).to_a - [2, 3, 4, 5, 6, 7, 8]

* Triple Dot (...) operator is used to create a specified sequence range in which the starting element is inclusive and ending element 
  will be exclusive.

  Example : (2..8).to_a - [2, 3, 4, 5, 6, 7] - 8 is not include in sequence.



---------------- defined? Operator --------------------------

The defined? the operator is a special operator which is used to check whether the passed expression is defined or not. It returns nil if passed argument is not defined, otherwise, it returns a string of that argument which defines that.

Syntax:

defined? expression_to_be_checked 

Example:
 
  Lets say Abc = 40, @abc = 40, abc = 40, only 40 not assigned to anyone, only a

* puts defined? Abc - Output - Constant

* puts defined? @abc - Output - Instance Variable

* puts defined? abc - Output - Local Variable

* puts defined? 40 - Output - Expression

* puts defined? a - Output - nil



---------------- Dot “.” and Double Colon “::” Operators --------------------------

* Dot (.) operator is used to access the methods of a class.

* Double Colon (::) operator is used to access the constants, class methods, and instance methods defined within a class or module to  
  anywhere outside the class or module



---------------- Operators Precedence --------------------------



Method                       Operator                      Description
Yes                             ::                 Constant resolution operator
Yes                          [ ] [ ]=              Element reference, element set
Yes                             **                 Exponentiation (raise to the power)
Yes                          ! ~ + -               Not, complement, unary plus and minus (method names for the last two are +@ and -@)
Yes                           * / %                Multiply, divide, and modulo
Yes                            + -                 Addition and subtraction
Yes                           >> <<                Right and left bitwise shift
Yes                             &                  Bitwise 'AND'
Yes                            ^ |                 Bitwise exclusive `OR' and regular `OR'
Yes                          <= < > >=             Comparison operators
Yes                         <=> == === != =~ !~    Equality and pattern match operators (!= and !~ may not be defined as methods)
                                  &&               Logical 'AND'
                                  ||               Logical 'OR'
                                .. ...             Range (inclusive and exclusive)
                                 ? :               Ternary if-then-else
                     = %= { /= -= += |= &= >>= 
                        <<= *= &&= ||= **=         Assignment Operators





