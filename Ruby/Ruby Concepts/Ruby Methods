--------------Initialize method / Constructor-------------

Class Employee
  def initialize
    Puts 'New Object Created'
  end
end

Vikram = Employee.new

# Result : New Object Created

Ranjit = Employee.new

# Result : New Object Created

Here the Vikram and Ranjit are the instance / objects of class Employee.



-------------- Instance Methods ----------------

* Instance methods represents the behaviour of the objects. 

# To understand Instance Variable and Instance Methods Basic Workflow

class Employee 
  def initialize (name,role)
    @name = name
    @role = role
  end

  def role
    puts "#{@name} working here as #{@role}."
  end
end

Ranjit = Employee.new('Ranjit','QA Engineer')

# Puts Ranjit.role - Results as 'Ranjit working here as QA Engineer'

Vikram = Employee.new('Vikram','Software Developer')

# Puts Vikram.role - Results as 'Vikram working here as Software Developer'

Ranjit.role 
Vikram.role

# Here the different objects can access the single method as stated above 'Ranjit.role' and 'Vikram.role' and their output stored in @name and @role instance variables for specific object and returns us the value. 



--------------- class method ------------------

* Class methods are methods we can call directly on the class itself, without having to instantiate any objects.When defining a class method, we prepend the method name with the reserved word 'self.'

class Employee
  # Class variables begin with @@
  @@number_of_employees = 1

  def initialize(name)
    @name = name
    @@number_of_employees += 1
    # It shows here we can access class variables within an instance method initialize
    puts "* New employee joined the organisation"
  end

  # Defining a class method name with the reserved word 'self.
  def self.employee_count
    puts "* Number of employees currently working is #{@@number_of_employees}"
  end
end

# Call the employee_count i.e class Method
Employee.employee_count

# Initialized new instance/object of class 
Ajay = Employee.new("Ajay")



--------------- attr_accessor method ------------------

Take above Program as reference

* getter method - To retreive the employee information

def get_name
  Employee name is {#@name} 
end

Ranjit.get_name

* setter method - To update the employee information

def set_name = (name)
  @name = name
end

Ranjit.set_name = "Rahul"

=> Ruby has a built-in way to automatically create getter and setter methods for us, using the attr_accessor method

Take above Program as reference

* attr_accessor :name

class Employee 
  attr_accessor :name

  def initialize (name,role)
    @name = name
    @role = role
  end

  def role
    puts "#{@name} working here as #{@role}."
  end
end

# Call method name as getter method defined under attr_accessor
puts "Employee name is #{Ranjit.name}"

# Call method name as setter method as attr_accessor takes symbol as argument
puts "Update the employee name of Ranjit to #{Ranjit.name = 'Rahul'}"



--------------- attr_reader / writer method ------------------

attr_reader : If we only want the getter method without the setter method.It works the same way but only allows us to retrieve the instance variable. 

attr_writer : If we only want the setter method without getter method.It works the same way but only allows us to update the instance variable. 



--------------- Calling methods with Self ------------------

Take above Program as reference

class Employee 
  attr_accessor :name, :age, :mail_id, :birth_date

  def initialize (name,age,mail_id,birth_date,role)
    self.name = name
    self.age = age
    self.mail_id = mail_id
    self.birth_date = birth_date
    @role = role
  end

  def role
    puts "#{self.name} working here as #{@role} and thier age is #{self.age} and mail id is #{self.mail_id}."
  end

  def update_emp_info (age,mail_id,birth_date)
    self.age = age
    self.mail_id = mail_id
    self.birth_date = birth_date
    puts "age,mailid and birth date for #{self.name} is updated to #{self.age},#{self.mail_id},#{self.birth_date}"
  end

end

* Note - If we not defined self say age=age, mail_id=mail_id it didn't work is because Ruby thought we were initializing local variables.To disambiguate from creating a local variable, we need to use self.name = to let Ruby know that we're calling a method.

# call name method as getter mentioned under attr_accessor 
Ranjit.name 

# Call name as setter method as attr_accessor takes symbol as argument
puts "Update the employee name of Ranjit to #{Ranjit.name = 'Rahul'}."

# Call method update_employee_info to update Ranjit Info
Ranjit.update_emp_info(22,'ranjit@xyz.com',"12-12-2000")



-------------self method internal workflow--------------------

a.) Using self with instance methods (Inside a class)

  class Employee 
  attr_accessor :name, :age
    def initialize (name,age)
      self.name = name
      self.age = age
    end
  end

  Vikram = Employee.new ("Vikram", 34)

* Here self.name or self.age is called the object vikram name and it's age.

* Within the class, when an instance method uses self, it references the calling object.


b.) Using self with class methods (Outside a class)

  class Employee 
  attr_accessor :name, :age
    def initialize (name,age)
      self.name = name
      self.age = age
    end
    
    def what_is_self
      self
    end
  end

  Vikram = Employee.new ("Vikram", 34)

  p Vikram.what_is_self

  output : #<Employee:0x000055d14eef4370 @name="Vikram", @age=28>
  # self contains object attributes for the specific object defined under class Employee

* When self is prepended/specified to a particular method, it is defining a class method.

* self using outside an instance method refers to the class itself.

Summary
 
* self inside of an instance method references the instance (object) that called the method - the calling object.

* self outside of an instance method references the class and can be used to define class methods.If we define a name class method, def self.name = (n) is the same as def Employee.name=(n)



-------------to_s method--------------------

a.) The to_s instance method comes built in to every class in Ruby.

b.) puts method automatically calls to_s on its argument.For example puts.object it also means puts.object.to_s

c.) puts method calls to_s for any argument that is not an array, we should use string interpolation "".

d.) the to_s method is called automatically on the object when we use it with puts or when used with string interpolation.


------------------- Method Lookup - How it Works --------------------

Lets understand with example

module P_Training
  def p_training
  end
end

module S_Training
  def s_training
  end

module T_Training
  #def t_training
  #end
end

module 

class Professor 
  include P_Training      
  include T_Training
  attr_accessor :name, :department
  def initialize (name,department)
    self.name = name
    self.department = department
  end
end

Ranjit.t_training - How ruby searches for t_training ?

a.) Professor
b.) P_Training
c.) S_Training
c.) T_Trainin - Here it finds method 
    Lets omit the method under T_training
d.) Object
e.) Kernal
f.) BasicObject

Find method nowhere throw an no method error