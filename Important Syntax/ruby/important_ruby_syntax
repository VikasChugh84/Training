Important ruby syntax/functions

------------------ comparing and fetching elements in single array and retrieve ----------------

Example : arr = [1, 1, 2, 2, 3, 4, 6, 8, 9]

* With single Loop - Logic
  i = 0
  n = 1
  rep_num = []
  while (i < arr.size) 
    if arr[i] == arr[n] 
      rep_num << arr[i]
    end
    n = n+1 
    i = i+1 
  end

* Using Two loops - Logic
  (0...arr.size).each do |i|
    (i+1...arr.size).each do |n|
      if arr[i] == arr[n]
        rep_num << arr[i]
      end
    end
  end


------------------------ Loop for fetch array multiple indexes ------------------------

[-4, -8, -12, -16, -20, 4, -4, -8, -12, -16, 8, 4, -4, -8, -12, 12, 8, 4, -4, -8, 16, 12, 8, 4, -4, 20, 16, 12, 8, 4] 

we want the index values of element 4 here.
z = []

(0..x.size-1).each do |i|
  if x[i]==4
    z<<i
  end
end

-------------------------- find maximum count of elements in array ---------------------

x = [3, 3, 4, 2, 4, 4, 2, 4, 4]

Fetch maximum number of element and their count

max_elem = arr.each{|i| arr.count(i)}.max
max_elem_count = arr.map{|i| arr.count(i)}.max

-------------------------- remove duplicate elements and its instance from array ------------

arr = [1,2,2,3,2,4]

* arr.uniq => [1,2,3,4] # remove duplicates and return the values without deleting instance

* arr.reject{|x| arr.count(x)>1} => [1,3,4] # remove duplicates and its instance


--------------------Integer to array----------------------

  x = 1234 

* (.split) - x.to_s.split("") => ["1234"]

* (.chars) - x.to_s.chars  => ["1","2","3","4"]



-------------------Integer from array of strings----------------- 

  x = ["1","2","3","8","h","b","s","h","w","5","3","5"]

* (.grep) - x.grep(/\d+/) => ["1", "2", "3", "8", "5", "3", "5"]
  # grep method used to find like select, filter

* (\d+) - is the regex that matches all the integers with the string and return the integer.

* x.grep(/\d+/, &:to_i) => [1,2,3,8,5,3,5]



------------------Count Integer in array----------------------
  
  x = ['a','b','c',1,2,3]

* (.count) - x.count { |e| e.is_a? Integer} => 3




-----------------------(.each) & (.map) difference array --------------------------

Major difference between each and map lies in the return value.

* (.each) executes the given block for each element of the array, then returns the array itself.

* (.map) do the same and executes the given block for each element of the array but returns a new array whose values are the return values of each iteration of the block and Return value is also the same array.

Example1 : names  = ["ab","cd","ef"]
           names.each {|i| i.upcase}
           Result => ["ab","cd","ef"] # No values upgraded because it returns the same array, no values change.

           names  = ["ab","cd","ef"]
           names.map {|i| i.upcase}
           Result => ["AB","CD","EF"] # values upgraded as it returns the new array with return values of each iteration of block.

Example2 : numbers = [1,2,3,4,5]
           numbers.each { |num| num * 2 }
           Result=> [1, 2, 3, 4, 5] # No values change

           numbers = [1,2,3,4,5]
           numbers.each { |num| num * 2 }
           Result => [2, 4, 6, 8, 10] # Values upgraded






   